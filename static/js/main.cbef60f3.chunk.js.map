{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","config.js","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Survey","applyTheme","ReactDOM","render","json","title","description","pages","name","elements","type","isRequired","requiredErrorText","choices","value","text","inputType","onComplete","survey","console","log","JSON","stringify","data","date","Date","today","getMonth","getDate","getFullYear","collection","add","gender_id","age","appointment_day","medic","contact1","contact2","address","zone","race","program","diagnosis1","diagnosis2","priority","start_date","catch","error","document","getElementById"],"mappings":"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","file":"static/js/main.cbef60f3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import firebase from \"firebase/compat/app\";\r\nimport \"firebase/compat/firestore\";\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDKq7ac8s-ZlpDmlShbqgPAOzio-zKA-3I\",\r\n  authDomain: \"hit-with-database.firebaseapp.com\",\r\n  projectId: \"hit-with-database\",\r\n  storageBucket: \"hit-with-database.appspot.com\",\r\n  messagingSenderId: \"674336402509\",\r\n  appId: \"1:674336402509:web:4527992724f50c76aa8004\",\r\n  measurementId: \"G-PPKFSB0ML3\"\r\n};\r\n\r\nconst firebaseInitial = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseInitial.firestore();\r\n\r\nexport { firebaseInitial, db };","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport \"survey-react/survey.css\";\r\nimport * as Survey from \"survey-react\";\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {firebaseInitial, db} from './config.js';\r\n\r\nSurvey.StylesManager.applyTheme(\"darkrose\");\r\n\r\nvar surveyJSON = { title: \"Enter New Patient\", description: \"Use this questionnaire to enter new patients into the database.\",\r\npages: [{ name: \"page1\",\r\nelements: [{ type: \"text\", name: \"question1\", title: \"Full Name\", isRequired: true, requiredErrorText: \"Enter full name.\" },\r\n{ type: \"radiogroup\", name: \"question11\", title: \"Gender\",\r\nchoices: [{ value: \"Female\", text: \"Female\" }, { value: \"Male\", text: \"Male\" }, { value: \"Other\", text: \"Other\" }, { value: \"Not_preferred\", text: \"Prefer not to say\" }] },\r\n{ type: \"text\", inputType: \"number\", name: \"question10Other\", title: \"Age\", isRequired: true, requiredErrorText: \"Enter age\"},\r\n{ type: \"text\", name: \"question3\", title: \"Race\", isRequired: true, requiredErrorText: \"Enter race\" },\r\n{ type: \"text\", name: \"question2\", title: \"Appointment Day\", isRequired:true, requiredErrorText: \"Enter appointment day\",},\r\n{ type: \"text\", name: \"question12\", title: \"Assigned Paramedic\", isRequired:true, requiredErrorText: \"Enter assigned paramedic day\",},\r\n{ type: \"text\", name: \"question5\", title: \"Emergency Contact 1\", isRequired: true, requiredErrorText: \"Enter emergency contact 1\"},\r\n{ type: \"text\", name: \"question5Other\", title: \"Emergency Contact 2\", isRequired: true, requiredErrorText: \"Enter emergency contact 2\"},\r\n{ type: \"text\", name: \"question4\", title: \"Street Address\", isRequired: true, requiredErrorText: \"Enter street address\" },\r\n{ type: \"text\", name: \"question6\", title: \"Zone\", isRequired: true, requiredErrorText: \"Enter county\" },\r\n{ type: \"text\", name: \"question9\", title: \"Program\", isRequired: true, requiredErrorText: \"Enter hospital program\"},\r\n{ type: \"text\", name: \"question13\", title: \"Primary Diagnosis\", isRequired: true, requiredErrorText: \"Enter primary diagnosis\" },\r\n{ type: \"comment\", name: \"question10\", title: \"Additional Diagnoses\", isRequired: true, requiredErrorText: \"Enter additional diagnoses\" }] }] }\r\n\r\nfunction getRandomInRange(from, to, fixed) {\r\n    return (Math.random() * (to - from) + from).toFixed(fixed) * 1;\r\n    // .toFixed() returns string, so ' * 1' is a trick to convert to number\r\n}\r\n\r\nfunction sendDataToServer(survey) {\r\n    console.log(\"Survey results: \" + JSON.stringify(survey.data[\"question1\"]));\r\n\r\n    const date = new Date();\r\n    const today = `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;  \r\n\r\n    db.collection(\"patients\").add({\r\n        name: survey.data[\"question1\"],\r\n        gender_id: survey.data[\"question11\"],\r\n        age: (survey.data[\"question10Other\"]),\r\n        appointment_day: survey.data[\"question2\"],\r\n        medic: survey.data[\"question12\"],\r\n        contact1: survey.data[\"question5\"],\r\n        contact2: survey.data[\"question5Other\"],\r\n        address: survey.data[\"question4\"],\r\n        zone: survey.data[\"question6\"],\r\n        race: (survey.data[\"question3\"]),\r\n        program: survey.data[\"question9\"],\r\n        diagnosis1: survey.data[\"question13\"],\r\n        diagnosis2: (survey.data[\"question10\"]),\r\n        priority: 3,\r\n        start_date: today\r\n    })\r\n    .then(() => {\r\n        console.log(\"Document successfully written!\");\r\n    })\r\n    .catch((error) => {\r\n        console.error(\"Error writing document: \", error);\r\n    });\r\n}\r\n\r\n\r\nReactDOM.render(\r\n  <Survey.Survey json={surveyJSON} onComplete={sendDataToServer} />, document.getElementById(\"surveyContainer\"))\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}